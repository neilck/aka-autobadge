"use client";

import styles from "../page.module.css";
import { useState, useEffect } from "react";
import { useSearchParams } from "next/navigation";
import { token, awardBadge } from "../serverActions/akaActions";
import { ConfigParam } from "../serverActions/configParams";

export default function Simple() {
  const searchParams = useSearchParams();
  // added by AKA Profiles on redirect to this page
  let code = searchParams.get("code") ?? "";
  // link back to AKA Profiles
  let redirect = searchParams.get("redirect") ?? "";

  // set to true after code is successfully exchanged for token
  const [isValidSession, setIsValidSession] = useState(false);
  // token for subsequent calls to API
  const [tokenValue, setTokenValue] = useState("");
  // configuration parameters return in payload of token
  const [configParams, setConfigParams] = useState<ConfigParam[]>([]);
  const [status, setStatus] = useState("loading...");

  const load = async () => {
    if (code == "") {
      console.log("code parameter missing in url");
      setIsValidSession(false);
      return;
    }

    console.log(`About to exchange code ${code} for a token...`);
    try {
      setIsValidSession(false);
      // exchange code for JSON web token
      // only valid session codes issued by AKA Profiles will return a token
      const result = await token(code as string);

      if (result.error == "missing or invalid parameter") {
        let mesg = `Unable to get token using invalid code ${code}. Valid codes are generated by akaprofiles on redirect, and can expire.`;
        setStatus(mesg);
        console.log(mesg);
        return;
      }

      if (result.token != undefined && result.payload != undefined) {
        console.log(`Received token ${result.token.substring(0, 20) + "..."}`);
        console.log("Payload:");
        console.log(result.payload);
        setIsValidSession(true);
        setTokenValue(result.token);
        setConfigParams(result.payload.configParams);
        const mesg = "Code successfully exchanged for token.";
        setStatus(mesg);
      }
    } catch (error) {
      const myError = error as Error;
      const mesg = `ERROR: ${myError.message}`;
      console.log(mesg);
      setStatus(mesg);
    }
  };

  const readyToAward = () => {
    // Add your own custom badge award logic here
    return true;
  };

  const doAwardBadge = async () => {
    try {
      const result = await awardBadge(tokenValue);
      if (result.success) {
        const mesg = `session updated with badge award`;
        console.log(mesg);
        setStatus(mesg);
      } else {
        const mesg = `badge not awarded: ${result.message}`;
        console.log(mesg);
        setStatus(mesg);
      }
    } catch (posterror) {
      const error = posterror as Error;
      const mesg = error.message;
      console.log(mesg);
      setStatus(mesg);
      return;
    }
  };

  const handleClick = () => {
    if (readyToAward()) {
      let mesg = "Awarding badge...";
      console.log(mesg);
      setStatus(mesg);
      doAwardBadge();
    }
  };

  useEffect(() => {
    load();
  }, []);

  return (
    <div className={styles.main}>
      <div className={styles.section}>
        This a simple badge award page for an an AKA Profiles auto badge.
      </div>

      <div className={styles.section}>
        <p>
          <b>Status</b>
        </p>
        <p>{status}</p>
      </div>
      <button disabled={!isValidSession} onClick={handleClick}>
        Award Badge to User
      </button>
      <a href={redirect}>Back to AKA Profiles</a>
    </div>
  );
}
